syntax = "proto3";

package realworld.v1;

import "google/api/annotations.proto";

option go_package = "kratos-realworld/api/realworld/v1;v1";

/*
    https://realworld-docs.netlify.app/specifications/backend/endpoints/
*/

service RealWorld {
    rpc SayHello(HelloRequest) returns (HelloReply) {
        option (google.api.http) = {
            get: "/realworld/{name}"
        };
    }

    rpc Registration(RegistrationRequest) returns (RegistrationReply) {
        option (google.api.http) = {
            post: "/api/users",
            body: "*",
        };
    }
    rpc Login(Authentication) returns (AuthenticationReply) {
        option (google.api.http) = {
            post: "/api/users/login",
            body: "*",
        };
    }
//    rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenReply) {
//        option (google.api.http) = {
//            post: "/api/users/token",
//            body: "*",
//        };
//    }

    rpc GetCurrentUser(GetCurrentUserRequest) returns (GetCurrentUserReply) {
        option (google.api.http) = {
            get: "/api/user"
        };
    }
    rpc UpdateUser(UpdateUserRequest) returns (UpdateUserReply) {
        option (google.api.http) = {
            put: "/api/user",
            body: "*",
        };
    }
    rpc GetProfile(GetProfileRequest) returns (GetProfileReply) {
        option (google.api.http) = {
            get: "/api/profiles/{username}"
        };
    }
    rpc FollowUser(FollowUserRequest) returns (FollowUserReply) {
        option (google.api.http) = {
            post: "/api/profiles/{username}/follow",
            body: "*",
        };
    }
    rpc UnfollowUser(UnfollowUserRequest) returns (UnfollowUserReply) {
        option (google.api.http) = {
            delete: "/api/profiles/{username}/follow",
        };
    }
    rpc ListArticles(ListArticlesRequest) returns (ListArticlesReply) {
        option (google.api.http) = {
            get: "/api/articles"
        };
    }
    rpc FeedArticles(FeedArticlesRequest) returns (FeedArticlesReply) {
        option (google.api.http) = {
            get: "/api/articles/feed"
        };
    }
    rpc GetArticle(GetArticleRequest) returns (GetArticleReply) {
        option (google.api.http) = {
            get: "/api/articles/{slug}"
        };
    }
    rpc CreateArticle(CreateArticleRequest) returns (CreateArticleReply) {
        option (google.api.http) = {
            post: "/api/articles",
            body: "*",
        };
    }
    rpc UpdateArticle(UpdateArticleRequest) returns (UpdateArticleReply) {
        option (google.api.http) = {
            put: "/api/articles/{slug}",
            body: "*",
        };
    }
    rpc DeleteArticle(DeleteArticleRequest) returns (DeleteArticleReply) {
        option (google.api.http) = {
            delete: "/api/articles/{slug}",
        };
    }
    rpc AddComments(AddCommentsRequest) returns (AddCommentsReply) {
        option (google.api.http) = {
            post: "/api/articles/{slug}/comments",
            body: "*",
        };
    }
    rpc GetComments(GetCommentsRequest) returns (GetCommentsReply) {
        option (google.api.http) = {
            get: "/api/articles/{slug}/comments"
        };
    }
    rpc DeleteComment(DeleteCommentRequest) returns (DeleteCommentReply) {
        option (google.api.http) = {
            delete: "/api/articles/{slug}/comments/{id}",
        };
    }
    rpc FavoriteArticle(FavoriteArticleRequest) returns (FavoriteArticleReply) {
        option (google.api.http) = {
            post: "/api/articles/{slug}/favorite",
            body: "*",
        };
    }
    rpc UnFavoriteArticle(UnFavoriteArticleRequest) returns (UnFavoriteArticleReply) {
        option (google.api.http) = {
            delete: "/api/articles/{slug}/favorite",
        };
    }
    rpc GetTags(GetTagsRequest) returns (GetTagsReply) {
        option (google.api.http) = {
            get: "/api/tags"
        };
    }
}

// The request message containing the user's name.
message HelloRequest {
    string name = 1;
}

message HelloReply {
    string message = 1;
}

message User {
    string email    = 1;
    string token    = 2;
    string username = 3;
    string bio      = 4;
    string image    = 5;
}
message Profile {
    string username = 1;
    string bio      = 2;
    string image    = 3;
    bool following  = 4;
}
message Article {
    string slug              = 1;
    string title             = 2;
    string description       = 3;
    string body              = 4;
    repeated string tag_list = 5;
    string created_at        = 6;
    string updated_at        = 7;
    bool favorited           = 8;
    uint32 favorites_count   = 9;
    Author author            = 10;
}
message Author {
    string username = 1;
    string bio      = 2;
    string image    = 3;
    bool following  = 4;
}
message Comment {
    uint32 id         = 1;
    string created_at = 2;
    string updated_at = 3;
    string body       = 4;
    Author author     = 5;
}

message Authentication {
    message User {
        string email    = 1;
        string password = 2;
    }
    User user = 1;
}
message AuthenticationReply {
    User user = 1;
}

message RegistrationRequest {
    message User {
        string username = 1;
        string email    = 2;
        string password = 3;
    }
    User user = 1;
}
message RegistrationReply {
    User user = 1;
}

message GetCurrentUserRequest {}
message GetCurrentUserReply {
    User user = 1;
}

message UpdateUserRequest {
    message User {
        string email = 1;
        string bio   = 2;
        string image = 3;
    }
    User user = 1;
}
message UpdateUserReply {
    User user = 1;
}

message GetProfileRequest {
    string username = 1;
}
message GetProfileReply {
    Profile profile = 1;
}

message FollowUserRequest {
    string username = 1;
}
message FollowUserReply {
    Profile profile = 1;
}

message UnfollowUserRequest {
    string username = 1;
}
message UnfollowUserReply {
    Profile profile = 1;
}

message ListArticlesRequest {
    string tag       = 1;
    string author    = 2;
    string favorited = 3;
    int64 limit      = 4;
    int64 offset     = 5;
}
message ListArticlesReply {
    repeated Article articles = 1;
    uint32 articles_count     = 2;
}

message FeedArticlesRequest {}
message FeedArticlesReply {
    repeated Article articles = 1;
    uint32 articles_count     = 2;
}

message GetArticleRequest {
    int64 slug = 1;
}
message GetArticleReply {
    Article article = 1;
}

message CreateArticleRequest {
    message Article {
        string title             = 1;
        string description       = 2;
        string body              = 3;
        repeated string tag_list = 4;
    }
    Article article = 1;
}
message CreateArticleReply {
    Article article = 1;
}

message UpdateArticleRequest {
    message Article {
        string title = 1;
    }
    Article article = 1;
    int64 slug      = 2;
}
message UpdateArticleReply {
    Article article = 1;
}

message DeleteArticleRequest {
    int64 slug = 1;
}
message DeleteArticleReply {}

message AddCommentsRequest {
    message Comment {
        string body = 1;
    }
    Comment comment = 1;
    int64 slug      = 2;
}
message AddCommentsReply {
    Comment comment = 1;
}

message GetCommentsRequest {
    int64 slug = 1;
}
message GetCommentsReply {
    repeated Comment comments = 1;
}

message DeleteCommentRequest {
    int64 slug = 1;
    int64 id   = 2;
}
message DeleteCommentReply {}

message FavoriteArticleRequest {
    int64 slug = 1;
}
message FavoriteArticleReply {
    Article article = 1;
}

message UnFavoriteArticleRequest {
    int64 slug = 1;
}
message UnFavoriteArticleReply {
    Article article = 1;
}

message GetTagsRequest {}
message GetTagsReply {
    repeated string tags = 1;
}

//message RefreshTokenRequest {
//    message User {
//        string email    = 1;
//        string password = 2;
//    }
//    User user = 1;
//}
//message RefreshTokenReply {
//    string token = 1;
//}